#+TITLE: A (Not So Gentle) Introduction To ATS
#+AUTHOR: Aditya Siram
#+OPTIONS: H:1 toc:f
#+LATEX_CLASS: beamer
#+LATEX_listingsCLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+EPRESENT_FRAME_LEVEL: 1
* Overview
- A Lisp
- Pattern matching
- Optional Types
- Built in YACC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
void swap(void *i, void *j, size_t size) {
  void* tmp = malloc(size);
  memcpy(tmp, j, size);
  memcpy(j, i, size);
  memcpy(i, tmp, size);
  free(tmp);
}
#+END_SRC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
void swap(void *i, void *j, size_t size) {
  void* tmp = malloc(size);




}
#+END_SRC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
void swap(void *i, void *j, size_t size) {
  void* tmp = malloc(size);
  memcpy(tmp, j, size);
  memcpy(j, i, size);
  memcpy(i, tmp, size);

}
#+END_SRC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
void swap(void *i, void *j, size_t size) {
  void* tmp = malloc(size);
  memcpy(tmp, j, size);
  memcpy(j, i, size);
  memcpy(i, tmp, size);
  free(tmp);
}
#+END_SRC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
%{
  #include <stdio.h>
  void swap(void *i, void *j, size_t size) {
    ...
  }
%}


#+END_SRC
* Swap
- A slightly non-standard swap
#+BEGIN_SRC
%{
  #include <stdio.h>
  void swap(void *i, void *j, size_t size) {
    ...
  }
%}
extern fun swap (i:ptr, j:ptr, s:size_t) : void = "mac#swap"

#+END_SRC

* Swap
- A slightly non-standard swap
#+BEGIN_SRC
%{
  #include <stdio.h>
  void swap(void *i, void *j, size_t size) {
    ...
  }
%}
extern fun swap (i:ptr, j:ptr, s:size_t) : void = "mac#swap"
extern fun malloc(s:size_t):ptr = "mac#malloc"
#+END_SRC
* Swap
- Runner
#+BEGIN_SRC
implement main0 () =
  let
     val i = malloc(sizeof<int>)
     val j = malloc(sizeof<double>)
     val _ = swap(i,j,sizeof<double>)
  in
     ()
  end
#+END_SRC
* Swap
- Runner
#+BEGIN_SRC
implement main0 () =
  let
     val i = malloc(sizeof<int>) // all good


  in

  end
#+END_SRC
* Swap
- Runner
#+BEGIN_SRC
implement main0 () =
  let
     val i = malloc(sizeof<int>)
     val j = malloc(sizeof<double>) // uh oh!

  in

  end
#+END_SRC
* Swap
- Runner
#+BEGIN_SRC
implement main0 () =
  let
     val i = malloc(sizeof<int>)
     val j = malloc(sizeof<double>)
     val _ = swap(i,j,sizeof<double>) // oh noes!
  in

  end
#+END_SRC
* Swap
- Runner
#+BEGIN_SRC
implement main0 () =
  let
     val i = malloc(sizeof<int>)
     val j = malloc(sizeof<double>)
     val _ = swap(i,j,sizeof<double>)
  in
     () // free as in leak
  end
#+END_SRC
